"""enhance quest system with party integration and quest types

Revision ID: 978bd79d7643
Revises: 2d26e4b51f15
Create Date: 2025-09-15 21:44:22.014481

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '978bd79d7643'
down_revision = '2d26e4b51f15'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('INDIVIDUAL', 'PARTY_INTERNAL', 'PARTY_EXPANSION', 'PARTY_HYBRID', name='questtype').create(op.get_bind())
    op.drop_constraint(op.f('party_quest_id_fkey'), 'party', type_='foreignkey')
    op.create_foreign_key(None, 'party', 'quest', ['quest_id'], ['id'], ondelete='CASCADE')
    op.add_column('quest', sa.Column('quest_type', postgresql.ENUM('INDIVIDUAL', 'PARTY_INTERNAL', 'PARTY_EXPANSION', 'PARTY_HYBRID', name='questtype', create_type=False), server_default='INDIVIDUAL', nullable=False))
    op.add_column('quest', sa.Column('party_id', sa.Uuid(), nullable=True))
    op.add_column('quest', sa.Column('parent_party_id', sa.Uuid(), nullable=True))
    op.add_column('quest', sa.Column('internal_slots', sa.Integer(), nullable=False))
    op.add_column('quest', sa.Column('public_slots', sa.Integer(), nullable=False))
    op.add_column('quest', sa.Column('assigned_member_ids', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True))
    op.add_column('quest', sa.Column('is_publicized', sa.Boolean(), nullable=False))
    op.add_column('quest', sa.Column('publicized_at', sa.DateTime(), nullable=True))
    op.create_foreign_key(None, 'quest', 'party', ['party_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'quest', 'party', ['parent_party_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'quest', type_='foreignkey')
    op.drop_constraint(None, 'quest', type_='foreignkey')
    op.drop_column('quest', 'publicized_at')
    op.drop_column('quest', 'is_publicized')
    op.drop_column('quest', 'assigned_member_ids')
    op.drop_column('quest', 'public_slots')
    op.drop_column('quest', 'internal_slots')
    op.drop_column('quest', 'parent_party_id')
    op.drop_column('quest', 'party_id')
    op.drop_column('quest', 'quest_type')
    op.drop_constraint(None, 'party', type_='foreignkey')
    op.create_foreign_key(op.f('party_quest_id_fkey'), 'party', 'quest', ['quest_id'], ['id'])
    sa.Enum('INDIVIDUAL', 'PARTY_INTERNAL', 'PARTY_EXPANSION', 'PARTY_HYBRID', name='questtype').drop(op.get_bind())
    # ### end Alembic commands ###
