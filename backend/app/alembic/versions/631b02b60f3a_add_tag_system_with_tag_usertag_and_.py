"""add tag system with tag usertag and questtag

Revision ID: 631b02b60f3a
Revises: f32093191d49
Create Date: 2025-09-15 10:26:52.965772

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '631b02b60f3a'
down_revision = 'f32093191d49'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='proficiencylevel').create(op.get_bind())
    sa.Enum('SYSTEM', 'APPROVED', 'PENDING', 'REJECTED', name='tagstatus').create(op.get_bind())
    sa.Enum('PROGRAMMING', 'FRAMEWORK', 'TOOL', 'GAME', 'GAME_GENRE', 'ART', 'MUSIC', 'MEDIA', 'SPORT', 'FITNESS', 'LANGUAGE', 'SUBJECT', 'SKILL', 'HOBBY', 'LOCATION', 'STYLE', name='tagcategory').create(op.get_bind())
    op.create_table('tag',
    sa.Column('category', postgresql.ENUM('PROGRAMMING', 'FRAMEWORK', 'TOOL', 'GAME', 'GAME_GENRE', 'ART', 'MUSIC', 'MEDIA', 'SPORT', 'FITNESS', 'LANGUAGE', 'SUBJECT', 'SKILL', 'HOBBY', 'LOCATION', 'STYLE', name='tagcategory', create_type=False), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('status', postgresql.ENUM('SYSTEM', 'APPROVED', 'PENDING', 'REJECTED', name='tagstatus', create_type=False), server_default='SYSTEM', nullable=False),
    sa.Column('suggested_by', sa.Uuid(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['suggested_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tag_name'), 'tag', ['name'], unique=True)
    op.create_index(op.f('ix_tag_slug'), 'tag', ['slug'], unique=True)
    op.create_table('questtag',
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('min_proficiency', postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='proficiencylevel', create_type=False), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('quest_id', sa.Uuid(), nullable=False),
    sa.Column('tag_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['quest_id'], ['quest.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('quest_id', 'tag_id')
    )
    op.create_table('usertag',
    sa.Column('proficiency_level', postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='proficiencylevel', create_type=False), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('tag_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('usertag')
    op.drop_table('questtag')
    op.drop_index(op.f('ix_tag_slug'), table_name='tag')
    op.drop_index(op.f('ix_tag_name'), table_name='tag')
    op.drop_table('tag')
    sa.Enum('PROGRAMMING', 'FRAMEWORK', 'TOOL', 'GAME', 'GAME_GENRE', 'ART', 'MUSIC', 'MEDIA', 'SPORT', 'FITNESS', 'LANGUAGE', 'SUBJECT', 'SKILL', 'HOBBY', 'LOCATION', 'STYLE', name='tagcategory').drop(op.get_bind())
    sa.Enum('SYSTEM', 'APPROVED', 'PENDING', 'REJECTED', name='tagstatus').drop(op.get_bind())
    sa.Enum('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='proficiencylevel').drop(op.get_bind())
    # ### end Alembic commands ###
