"""Update user, quest and party models

Revision ID: eebccc4dd9b2
Revises: 5b16bd954228
Create Date: 2025-09-14 21:25:28.725587

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'eebccc4dd9b2'
down_revision = '5b16bd954228'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('OWNER', 'MODERATOR', 'MEMBER', name='partymemberrole').create(op.get_bind())
    op.add_column('party', sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True))
    op.add_column('party', sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True))
    op.add_column('party', sa.Column('is_private', sa.Boolean(), nullable=False))
    op.add_column('party', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('party', sa.Column('completed_at', sa.DateTime(), nullable=True))
    op.add_column('party', sa.Column('archived_at', sa.DateTime(), nullable=True))
    op.drop_column('party', 'disbanded_at')
    op.add_column('partymember', sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False))
    op.alter_column('partymember', 'role',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.Enum('OWNER', 'MODERATOR', 'MEMBER', name='partymemberrole'),
               nullable=False,
               postgresql_using='role::partymemberrole')
    op.drop_column('partymember', 'is_leader')
    op.drop_column('partymember', 'is_active')
    op.add_column('quest', sa.Column('objective', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False))
    op.add_column('quest', sa.Column('auto_approve', sa.Boolean(), nullable=False))
    op.add_column('quest', sa.Column('embedding_vector', sqlmodel.sql.sqltypes.AutoString(length=10000), nullable=True))
    op.add_column('quest', sa.Column('search_keywords', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True))
    op.add_column('quest', sa.Column('view_count', sa.Integer(), nullable=False))
    op.add_column('quest', sa.Column('application_count', sa.Integer(), nullable=False))
    op.add_column('quest', sa.Column('current_party_size', sa.Integer(), nullable=False))
    op.add_column('quest', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.add_column('quest', sa.Column('activated_at', sa.DateTime(), nullable=True))
    op.add_column('quest', sa.Column('completed_at', sa.DateTime(), nullable=True))
    op.drop_column('user', 'preferred_party_size_min')
    op.drop_column('user', 'preferred_party_size_max')
    op.drop_column('user', 'communication_style')
    op.drop_column('user', 'preferred_commitment_level')
    sa.Enum('TEXT', 'VOICE', 'VIDEO', 'MIXED', name='communicationstyle').drop(op.get_bind())
    op.sync_enum_values(
        enum_schema='public',
        enum_name='partystatus',
        new_values=['ACTIVE', 'COMPLETED', 'ARCHIVED'],
        affected_columns=[TableReference(table_schema='public', table_name='party', column_name='status', existing_server_default="'ACTIVE'::partystatus")],
        enum_values_to_rename=[('FORMING', 'ACTIVE'), ('DISBANDED', 'ARCHIVED')],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema='public',
        enum_name='partystatus',
        new_values=['FORMING', 'ACTIVE', 'COMPLETED', 'DISBANDED'],
        affected_columns=[TableReference(table_schema='public', table_name='party', column_name='status', existing_server_default="'FORMING'::partystatus")],
        enum_values_to_rename=[('ACTIVE', 'FORMING'), ('ARCHIVED', 'DISBANDED')],
    )
    sa.Enum('TEXT', 'VOICE', 'VIDEO', 'MIXED', name='communicationstyle').create(op.get_bind())
    op.add_column('user', sa.Column('preferred_commitment_level', postgresql.ENUM('CASUAL', 'MODERATE', 'SERIOUS', 'PROFESSIONAL', name='commitmentlevel', create_type=False), server_default=sa.text("'CASUAL'::commitmentlevel"), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('communication_style', postgresql.ENUM('TEXT', 'VOICE', 'VIDEO', 'MIXED', name='communicationstyle', create_type=False), server_default=sa.text("'TEXT'::communicationstyle"), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('preferred_party_size_max', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('preferred_party_size_min', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_column('quest', 'completed_at')
    op.drop_column('quest', 'activated_at')
    op.drop_column('quest', 'updated_at')
    op.drop_column('quest', 'current_party_size')
    op.drop_column('quest', 'application_count')
    op.drop_column('quest', 'view_count')
    op.drop_column('quest', 'search_keywords')
    op.drop_column('quest', 'embedding_vector')
    op.drop_column('quest', 'auto_approve')
    op.drop_column('quest', 'objective')
    op.add_column('partymember', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('partymember', sa.Column('is_leader', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.alter_column('partymember', 'role',
               existing_type=sa.Enum('OWNER', 'MODERATOR', 'MEMBER', name='partymemberrole'),
               type_=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('partymember', 'status')
    op.add_column('party', sa.Column('disbanded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('party', 'archived_at')
    op.drop_column('party', 'completed_at')
    op.drop_column('party', 'created_at')
    op.drop_column('party', 'is_private')
    op.drop_column('party', 'description')
    op.drop_column('party', 'name')
    sa.Enum('OWNER', 'MODERATOR', 'MEMBER', name='partymemberrole').drop(op.get_bind())
    # ### end Alembic commands ###
