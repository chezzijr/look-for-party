/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as RecoverPasswordRouteImport } from './routes/recover-password'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutSettingsRouteImport } from './routes/_layout/settings'
import { Route as LayoutQuestsRouteImport } from './routes/_layout/quests'
import { Route as LayoutDashboardRouteImport } from './routes/_layout/dashboard'
import { Route as LayoutQuestsIndexRouteImport } from './routes/_layout/quests.index'
import { Route as LayoutQuestsCreateRouteImport } from './routes/_layout/quests.create'
import { Route as LayoutQuestsQuestIdRouteImport } from './routes/_layout/quests.$questId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const RecoverPasswordRoute = RecoverPasswordRouteImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutQuestsRoute = LayoutQuestsRouteImport.update({
  id: '/quests',
  path: '/quests',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardRoute = LayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutQuestsIndexRoute = LayoutQuestsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutQuestsRoute,
} as any)
const LayoutQuestsCreateRoute = LayoutQuestsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LayoutQuestsRoute,
} as any)
const LayoutQuestsQuestIdRoute = LayoutQuestsQuestIdRouteImport.update({
  id: '/$questId',
  path: '/$questId',
  getParentRoute: () => LayoutQuestsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/quests': typeof LayoutQuestsRouteWithChildren
  '/settings': typeof LayoutSettingsRoute
  '/quests/$questId': typeof LayoutQuestsQuestIdRoute
  '/quests/create': typeof LayoutQuestsCreateRoute
  '/quests/': typeof LayoutQuestsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/settings': typeof LayoutSettingsRoute
  '/quests/$questId': typeof LayoutQuestsQuestIdRoute
  '/quests/create': typeof LayoutQuestsCreateRoute
  '/quests': typeof LayoutQuestsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/quests': typeof LayoutQuestsRouteWithChildren
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/quests/$questId': typeof LayoutQuestsQuestIdRoute
  '/_layout/quests/create': typeof LayoutQuestsCreateRoute
  '/_layout/quests/': typeof LayoutQuestsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/dashboard'
    | '/quests'
    | '/settings'
    | '/quests/$questId'
    | '/quests/create'
    | '/quests/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/dashboard'
    | '/settings'
    | '/quests/$questId'
    | '/quests/create'
    | '/quests'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/_layout/dashboard'
    | '/_layout/quests'
    | '/_layout/settings'
    | '/_layout/quests/$questId'
    | '/_layout/quests/create'
    | '/_layout/quests/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  RecoverPasswordRoute: typeof RecoverPasswordRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recover-password': {
      id: '/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof RecoverPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/quests': {
      id: '/_layout/quests'
      path: '/quests'
      fullPath: '/quests'
      preLoaderRoute: typeof LayoutQuestsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/quests/': {
      id: '/_layout/quests/'
      path: '/'
      fullPath: '/quests/'
      preLoaderRoute: typeof LayoutQuestsIndexRouteImport
      parentRoute: typeof LayoutQuestsRoute
    }
    '/_layout/quests/create': {
      id: '/_layout/quests/create'
      path: '/create'
      fullPath: '/quests/create'
      preLoaderRoute: typeof LayoutQuestsCreateRouteImport
      parentRoute: typeof LayoutQuestsRoute
    }
    '/_layout/quests/$questId': {
      id: '/_layout/quests/$questId'
      path: '/$questId'
      fullPath: '/quests/$questId'
      preLoaderRoute: typeof LayoutQuestsQuestIdRouteImport
      parentRoute: typeof LayoutQuestsRoute
    }
  }
}

interface LayoutQuestsRouteChildren {
  LayoutQuestsQuestIdRoute: typeof LayoutQuestsQuestIdRoute
  LayoutQuestsCreateRoute: typeof LayoutQuestsCreateRoute
  LayoutQuestsIndexRoute: typeof LayoutQuestsIndexRoute
}

const LayoutQuestsRouteChildren: LayoutQuestsRouteChildren = {
  LayoutQuestsQuestIdRoute: LayoutQuestsQuestIdRoute,
  LayoutQuestsCreateRoute: LayoutQuestsCreateRoute,
  LayoutQuestsIndexRoute: LayoutQuestsIndexRoute,
}

const LayoutQuestsRouteWithChildren = LayoutQuestsRoute._addFileChildren(
  LayoutQuestsRouteChildren,
)

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutQuestsRoute: typeof LayoutQuestsRouteWithChildren
  LayoutSettingsRoute: typeof LayoutSettingsRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutQuestsRoute: LayoutQuestsRouteWithChildren,
  LayoutSettingsRoute: LayoutSettingsRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  RecoverPasswordRoute: RecoverPasswordRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
