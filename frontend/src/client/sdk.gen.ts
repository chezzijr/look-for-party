// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  PartiesCreatePartyData,
  PartiesCreatePartyResponse,
  PartiesReadMyPartiesResponse,
  PartiesReadPartyData,
  PartiesReadPartyResponse,
  PartiesUpdatePartyData,
  PartiesUpdatePartyResponse,
  PartiesReadPartyMembersData,
  PartiesReadPartyMembersResponse,
  PartiesAddPartyMemberData,
  PartiesAddPartyMemberResponse,
  PartiesUpdatePartyMemberData,
  PartiesUpdatePartyMemberResponse,
  PartiesRemovePartyMemberData,
  PartiesRemovePartyMemberResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  QuestApplicationsApplyToQuestData,
  QuestApplicationsApplyToQuestResponse,
  QuestApplicationsReadMyApplicationsData,
  QuestApplicationsReadMyApplicationsResponse,
  QuestApplicationsReadQuestApplicationsData,
  QuestApplicationsReadQuestApplicationsResponse,
  QuestApplicationsReadApplicationData,
  QuestApplicationsReadApplicationResponse,
  QuestApplicationsUpdateApplicationData,
  QuestApplicationsUpdateApplicationResponse,
  QuestApplicationsWithdrawApplicationData,
  QuestApplicationsWithdrawApplicationResponse,
  QuestsReadQuestsData,
  QuestsReadQuestsResponse,
  QuestsCreateQuestData,
  QuestsCreateQuestResponse,
  QuestsReadMyQuestsData,
  QuestsReadMyQuestsResponse,
  QuestsReadQuestData,
  QuestsReadQuestResponse,
  QuestsUpdateQuestData,
  QuestsUpdateQuestResponse,
  QuestsDeleteQuestData,
  QuestsDeleteQuestResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PartiesService {
  /**
   * Create Party
   * Create party for a quest (quest creator only).
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PartyPublic Successful Response
   * @throws ApiError
   */
  public static createParty(
    data: PartiesCreatePartyData,
  ): CancelablePromise<PartiesCreatePartyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/parties/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read My Parties
   * Get current user's party memberships.
   * @returns PartiesPublic Successful Response
   * @throws ApiError
   */
  public static readMyParties(): CancelablePromise<PartiesReadMyPartiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/parties/my",
    })
  }

  /**
   * Read Party
   * Get party by ID.
   * @param data The data for the request.
   * @param data.partyId
   * @returns PartyPublic Successful Response
   * @throws ApiError
   */
  public static readParty(
    data: PartiesReadPartyData,
  ): CancelablePromise<PartiesReadPartyResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/parties/{party_id}",
      path: {
        party_id: data.partyId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Party
   * Update party (party leaders and quest creator only).
   * @param data The data for the request.
   * @param data.partyId
   * @param data.requestBody
   * @returns PartyPublic Successful Response
   * @throws ApiError
   */
  public static updateParty(
    data: PartiesUpdatePartyData,
  ): CancelablePromise<PartiesUpdatePartyResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/parties/{party_id}",
      path: {
        party_id: data.partyId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Party Members
   * Get party members.
   * @param data The data for the request.
   * @param data.partyId
   * @param data.activeOnly
   * @returns PartyMembersPublic Successful Response
   * @throws ApiError
   */
  public static readPartyMembers(
    data: PartiesReadPartyMembersData,
  ): CancelablePromise<PartiesReadPartyMembersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/parties/{party_id}/members",
      path: {
        party_id: data.partyId,
      },
      query: {
        active_only: data.activeOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Party Member
   * Add member to party (party leaders and quest creator only).
   * @param data The data for the request.
   * @param data.partyId
   * @param data.requestBody
   * @returns PartyMemberPublic Successful Response
   * @throws ApiError
   */
  public static addPartyMember(
    data: PartiesAddPartyMemberData,
  ): CancelablePromise<PartiesAddPartyMemberResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/parties/{party_id}/members",
      path: {
        party_id: data.partyId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Party Member
   * Update party member (party leaders, quest creator, or the member themselves).
   * @param data The data for the request.
   * @param data.partyId
   * @param data.memberId
   * @param data.requestBody
   * @returns PartyMemberPublic Successful Response
   * @throws ApiError
   */
  public static updatePartyMember(
    data: PartiesUpdatePartyMemberData,
  ): CancelablePromise<PartiesUpdatePartyMemberResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/parties/{party_id}/members/{member_id}",
      path: {
        party_id: data.partyId,
        member_id: data.memberId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Party Member
   * Remove member from party (party leaders, quest creator, or the member themselves).
   * @param data The data for the request.
   * @param data.partyId
   * @param data.memberId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removePartyMember(
    data: PartiesRemovePartyMemberData,
  ): CancelablePromise<PartiesRemovePartyMemberResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/parties/{party_id}/members/{member_id}",
      path: {
        party_id: data.partyId,
        member_id: data.memberId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class QuestApplicationsService {
  /**
   * Apply To Quest
   * Apply to a quest.
   * @param data The data for the request.
   * @param data.questId
   * @param data.requestBody
   * @returns QuestApplicationPublic Successful Response
   * @throws ApiError
   */
  public static applyToQuest(
    data: QuestApplicationsApplyToQuestData,
  ): CancelablePromise<QuestApplicationsApplyToQuestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/quest-applications/quests/{quest_id}/apply",
      path: {
        quest_id: data.questId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read My Applications
   * Get current user's applications.
   * @param data The data for the request.
   * @param data.status
   * @returns QuestApplicationsPublic Successful Response
   * @throws ApiError
   */
  public static readMyApplications(
    data: QuestApplicationsReadMyApplicationsData = {},
  ): CancelablePromise<QuestApplicationsReadMyApplicationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/quest-applications/my",
      query: {
        status: data.status,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Quest Applications
   * Get applications for a quest (quest creator only).
   * @param data The data for the request.
   * @param data.questId
   * @param data.status
   * @returns QuestApplicationsPublic Successful Response
   * @throws ApiError
   */
  public static readQuestApplications(
    data: QuestApplicationsReadQuestApplicationsData,
  ): CancelablePromise<QuestApplicationsReadQuestApplicationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/quest-applications/quests/{quest_id}/applications",
      path: {
        quest_id: data.questId,
      },
      query: {
        status: data.status,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Application
   * Get application by ID.
   * @param data The data for the request.
   * @param data.applicationId
   * @returns QuestApplicationPublic Successful Response
   * @throws ApiError
   */
  public static readApplication(
    data: QuestApplicationsReadApplicationData,
  ): CancelablePromise<QuestApplicationsReadApplicationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/quest-applications/{application_id}",
      path: {
        application_id: data.applicationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Application
   * Update application (approve/reject by quest creator, or edit by applicant).
   * @param data The data for the request.
   * @param data.applicationId
   * @param data.requestBody
   * @returns QuestApplicationPublic Successful Response
   * @throws ApiError
   */
  public static updateApplication(
    data: QuestApplicationsUpdateApplicationData,
  ): CancelablePromise<QuestApplicationsUpdateApplicationResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/quest-applications/{application_id}",
      path: {
        application_id: data.applicationId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Withdraw Application
   * Withdraw application (applicant only).
   * @param data The data for the request.
   * @param data.applicationId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static withdrawApplication(
    data: QuestApplicationsWithdrawApplicationData,
  ): CancelablePromise<QuestApplicationsWithdrawApplicationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/quest-applications/{application_id}",
      path: {
        application_id: data.applicationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class QuestsService {
  /**
   * Read Quests
   * Retrieve quests.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.status
   * @param data.category
   * @returns QuestsPublic Successful Response
   * @throws ApiError
   */
  public static readQuests(
    data: QuestsReadQuestsData = {},
  ): CancelablePromise<QuestsReadQuestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/quests/",
      query: {
        skip: data.skip,
        limit: data.limit,
        status: data.status,
        category: data.category,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Quest
   * Create new quest.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QuestPublic Successful Response
   * @throws ApiError
   */
  public static createQuest(
    data: QuestsCreateQuestData,
  ): CancelablePromise<QuestsCreateQuestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/quests/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read My Quests
   * Retrieve current user's quests.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns QuestsPublic Successful Response
   * @throws ApiError
   */
  public static readMyQuests(
    data: QuestsReadMyQuestsData = {},
  ): CancelablePromise<QuestsReadMyQuestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/quests/my",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Quest
   * Get quest by ID.
   * @param data The data for the request.
   * @param data.questId
   * @returns QuestPublic Successful Response
   * @throws ApiError
   */
  public static readQuest(
    data: QuestsReadQuestData,
  ): CancelablePromise<QuestsReadQuestResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/quests/{quest_id}",
      path: {
        quest_id: data.questId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Quest
   * Update quest.
   * @param data The data for the request.
   * @param data.questId
   * @param data.requestBody
   * @returns QuestPublic Successful Response
   * @throws ApiError
   */
  public static updateQuest(
    data: QuestsUpdateQuestData,
  ): CancelablePromise<QuestsUpdateQuestResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/quests/{quest_id}",
      path: {
        quest_id: data.questId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Quest
   * Delete quest.
   * @param data The data for the request.
   * @param data.questId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteQuest(
    data: QuestsDeleteQuestData,
  ): CancelablePromise<QuestsDeleteQuestResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/quests/{quest_id}",
      path: {
        quest_id: data.questId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
