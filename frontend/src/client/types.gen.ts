// This file is auto-generated by @hey-api/openapi-ts

export type ApplicationStatus =
  | "PENDING"
  | "APPROVED"
  | "REJECTED"
  | "WITHDRAWN"
  | "EXPIRED"

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CommitmentLevel = "CASUAL" | "MODERATE" | "SERIOUS" | "PROFESSIONAL"

export type CommunicationStyle = "TEXT" | "VOICE" | "VIDEO" | "MIXED"

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type LocationType = "REMOTE" | "IN_PERSON" | "HYBRID"

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PartiesPublic = {
  data: Array<PartyPublic>
  count: number
}

export type PartyCreate = {
  status?: PartyStatus
  chat_channel_id?: string | null
  quest_id: string
}

export type PartyMemberCreate = {
  role?: string | null
  is_leader?: boolean
  user_id: string
}

export type PartyMemberPublic = {
  role?: string | null
  is_leader?: boolean
  id: string
  party_id: string
  user_id: string
  joined_at: string
  left_at: string | null
  is_active: boolean
}

export type PartyMembersPublic = {
  data: Array<PartyMemberPublic>
  count: number
}

export type PartyMemberUpdate = {
  role?: string | null
  is_leader?: boolean | null
}

export type PartyPublic = {
  status?: PartyStatus
  chat_channel_id?: string | null
  id: string
  quest_id: string
  formed_at: string
  disbanded_at: string | null
}

export type PartyStatus = "FORMING" | "ACTIVE" | "COMPLETED" | "DISBANDED"

export type PartyUpdate = {
  status?: PartyStatus | null
  chat_channel_id?: string | null
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type QuestApplicationCreate = {
  message: string
  proposed_role?: string | null
}

export type QuestApplicationPublic = {
  message: string
  proposed_role?: string | null
  id: string
  quest_id: string
  applicant_id: string
  status: ApplicationStatus
  applied_at: string
  reviewed_at: string | null
  reviewer_feedback: string | null
}

export type QuestApplicationsPublic = {
  data: Array<QuestApplicationPublic>
  count: number
}

export type QuestApplicationUpdate = {
  message?: string | null
  proposed_role?: string | null
  status?: ApplicationStatus | null
  reviewer_feedback?: string | null
}

export type QuestCategory =
  | "GAMING"
  | "PROFESSIONAL"
  | "SOCIAL"
  | "LEARNING"
  | "CREATIVE"
  | "FITNESS"
  | "TRAVEL"

export type QuestCreate = {
  title: string
  description: string
  category: QuestCategory
  party_size_min: number
  party_size_max: number
  required_commitment: CommitmentLevel
  location_type: LocationType
  location_detail?: string | null
  starts_at?: string | null
  deadline?: string | null
  estimated_duration?: string | null
  visibility?: QuestVisibility
}

export type QuestPublic = {
  title: string
  description: string
  category: QuestCategory
  party_size_min: number
  party_size_max: number
  required_commitment: CommitmentLevel
  location_type: LocationType
  location_detail?: string | null
  starts_at?: string | null
  deadline?: string | null
  estimated_duration?: string | null
  visibility?: QuestVisibility
  id: string
  creator_id: string
  status: QuestStatus
  created_at: string
}

export type QuestsPublic = {
  data: Array<QuestPublic>
  count: number
}

export type QuestStatus =
  | "RECRUITING"
  | "IN_PROGRESS"
  | "COMPLETED"
  | "CANCELLED"
  | "EXPIRED"

export type QuestUpdate = {
  title?: string | null
  description?: string | null
  category?: QuestCategory | null
  party_size_min?: number | null
  party_size_max?: number | null
  required_commitment?: CommitmentLevel | null
  location_type?: LocationType | null
  location_detail?: string | null
  starts_at?: string | null
  deadline?: string | null
  estimated_duration?: string | null
  visibility?: QuestVisibility | null
  status?: QuestStatus | null
}

export type QuestVisibility = "PUBLIC" | "UNLISTED" | "PRIVATE"

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  bio?: string | null
  location?: string | null
  timezone?: string | null
  preferred_party_size_min?: number
  preferred_party_size_max?: number
  preferred_commitment_level?: CommitmentLevel
  communication_style?: CommunicationStyle
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  bio?: string | null
  location?: string | null
  timezone?: string | null
  preferred_party_size_min?: number
  preferred_party_size_max?: number
  preferred_commitment_level?: CommitmentLevel
  communication_style?: CommunicationStyle
  id: string
  created_at: string
  reputation_score: string
  total_completed_quests: number
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  bio?: string | null
  location?: string | null
  timezone?: string | null
  preferred_party_size_min?: number | null
  preferred_party_size_max?: number | null
  preferred_commitment_level?: CommitmentLevel | null
  communication_style?: CommunicationStyle | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
  bio?: string | null
  location?: string | null
  timezone?: string | null
  preferred_party_size_min?: number | null
  preferred_party_size_max?: number | null
  preferred_commitment_level?: CommitmentLevel | null
  communication_style?: CommunicationStyle | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PartiesCreatePartyData = {
  requestBody: PartyCreate
}

export type PartiesCreatePartyResponse = PartyPublic

export type PartiesReadMyPartiesResponse = PartiesPublic

export type PartiesReadPartyData = {
  partyId: string
}

export type PartiesReadPartyResponse = PartyPublic

export type PartiesUpdatePartyData = {
  partyId: string
  requestBody: PartyUpdate
}

export type PartiesUpdatePartyResponse = PartyPublic

export type PartiesReadPartyMembersData = {
  activeOnly?: boolean
  partyId: string
}

export type PartiesReadPartyMembersResponse = PartyMembersPublic

export type PartiesAddPartyMemberData = {
  partyId: string
  requestBody: PartyMemberCreate
}

export type PartiesAddPartyMemberResponse = PartyMemberPublic

export type PartiesUpdatePartyMemberData = {
  memberId: string
  partyId: string
  requestBody: PartyMemberUpdate
}

export type PartiesUpdatePartyMemberResponse = PartyMemberPublic

export type PartiesRemovePartyMemberData = {
  memberId: string
  partyId: string
}

export type PartiesRemovePartyMemberResponse = Message

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type QuestApplicationsApplyToQuestData = {
  questId: string
  requestBody: QuestApplicationCreate
}

export type QuestApplicationsApplyToQuestResponse = QuestApplicationPublic

export type QuestApplicationsReadMyApplicationsData = {
  status?: ApplicationStatus | null
}

export type QuestApplicationsReadMyApplicationsResponse =
  QuestApplicationsPublic

export type QuestApplicationsReadQuestApplicationsData = {
  questId: string
  status?: ApplicationStatus | null
}

export type QuestApplicationsReadQuestApplicationsResponse =
  QuestApplicationsPublic

export type QuestApplicationsReadApplicationData = {
  applicationId: string
}

export type QuestApplicationsReadApplicationResponse = QuestApplicationPublic

export type QuestApplicationsUpdateApplicationData = {
  applicationId: string
  requestBody: QuestApplicationUpdate
}

export type QuestApplicationsUpdateApplicationResponse = QuestApplicationPublic

export type QuestApplicationsWithdrawApplicationData = {
  applicationId: string
}

export type QuestApplicationsWithdrawApplicationResponse = Message

export type QuestsReadQuestsData = {
  category?: QuestCategory | null
  limit?: number
  skip?: number
  status?: QuestStatus | null
}

export type QuestsReadQuestsResponse = QuestsPublic

export type QuestsCreateQuestData = {
  requestBody: QuestCreate
}

export type QuestsCreateQuestResponse = QuestPublic

export type QuestsReadMyQuestsData = {
  limit?: number
  skip?: number
}

export type QuestsReadMyQuestsResponse = QuestsPublic

export type QuestsReadQuestData = {
  questId: string
}

export type QuestsReadQuestResponse = QuestPublic

export type QuestsUpdateQuestData = {
  questId: string
  requestBody: QuestUpdate
}

export type QuestsUpdateQuestResponse = QuestPublic

export type QuestsDeleteQuestData = {
  questId: string
}

export type QuestsDeleteQuestResponse = Message

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
